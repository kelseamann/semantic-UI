{"version":3,"file":"index.esm.js","sources":["../src/components/Button.tsx","../src/components/Card.tsx","../src/components/Modal.tsx","../src/components/Th.tsx","../src/components/Td.tsx","../src/components/Thead.tsx","../src/components/Tbody.tsx","../src/components/Checkbox.tsx","../src/components/Link.tsx","../src/components/StatusBadge.tsx","../src/components/StarIcon.tsx","../src/utils/metadata.ts","../src/utils/accessibility.ts","../src/hooks/useSemanticMetadata.ts","../src/hooks/useAccessibility.ts"],"sourcesContent":["import React from 'react';\nimport { Button as PFButton } from '@patternfly/react-core';\nimport { SemanticComponentProps } from '../types';\n\nexport interface ButtonProps extends Omit<React.ComponentProps<typeof PFButton>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic action this button performs (auto-inferred from variant if not provided) */\n  action?: 'primary' | 'secondary' | 'destructive' | 'navigation' | 'toggle';\n  /** Context of where this button is used (auto-inferred from props if not provided) */\n  context?: 'form' | 'toolbar' | 'modal' | 'card' | 'navigation' | 'table' | 'alert';\n}\n\n/** Button - PatternFly Button wrapper with semantic metadata for AI tooling */\nexport const Button: React.FC<ButtonProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  action,\n  context,\n  children,\n  variant,\n  onClick,\n  isDisabled,\n  ...props\n}) => {\n  // Auto-infer semantic properties from PatternFly props\n  const inferredAction = action || (variant === 'primary' ? 'primary' : \n                                   variant === 'danger' ? 'destructive' : \n                                   variant === 'link' ? 'navigation' : 'secondary');\n  \n  const inferredContext = context || (onClick ? 'interactive' : 'form');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `button-${inferredAction}-${inferredContext}`;\n  const metadata = aiMetadata || {\n    description: `${inferredAction} action button for ${inferredContext} context`,\n    category: 'forms',\n    complexity: 'simple',\n    usage: [`${inferredContext}-${inferredAction}`, 'user-interaction']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Button';\n\n  return (\n    <PFButton\n      {...props}\n      variant={variant}\n      onClick={onClick}\n      isDisabled={isDisabled}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-action={inferredAction}\n      data-context={inferredContext}\n    >\n      {children}\n    </PFButton>\n  );\n};\n\nexport default Button;\n","import React from 'react';\nimport { Card as PFCard } from '@patternfly/react-core';\nimport { SemanticComponentProps } from '../types';\n\nexport interface CardProps extends Omit<React.ComponentProps<typeof PFCard>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this card (auto-inferred from props if not provided) */\n  purpose?: 'content-display' | 'data-summary' | 'action-panel' | 'information' | 'navigation';\n  /** The type of content this card contains (auto-inferred from children if not provided) */\n  contentType?: 'text' | 'data' | 'media' | 'mixed' | 'interactive';\n}\n\n/** Card - PatternFly Card wrapper with semantic metadata for AI tooling */\nexport const Card: React.FC<CardProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  contentType,\n  children,\n  isSelectable,\n  isClickable,\n  ...props\n}) => {\n  // Auto-infer semantic properties from PatternFly props and children\n  const inferredPurpose = purpose || (isSelectable || isClickable ? 'action-panel' : 'content-display');\n  \n  // Simple content type inference based on children\n  const inferredContentType = contentType || 'mixed';\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `card-${inferredPurpose}-${inferredContentType}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} card containing ${inferredContentType} content`,\n    category: 'data-display',\n    complexity: 'moderate',\n    usage: [`${inferredPurpose}-display`, 'content-organization']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Card';\n\n  return (\n    <PFCard\n      {...props}\n      isSelectable={isSelectable}\n      isClickable={isClickable}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-content-type={inferredContentType}\n    >\n      {children}\n    </PFCard>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport { Modal as PFModal } from '@patternfly/react-core';\nimport { SemanticComponentProps } from '../types';\n\nexport interface ModalProps extends Omit<React.ComponentProps<typeof PFModal>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this modal (auto-inferred from variant if not provided) */\n  purpose?: 'confirmation' | 'form' | 'information' | 'selection' | 'workflow';\n  /** The type of interaction this modal facilitates (auto-inferred from props if not provided) */\n  interactionType?: 'blocking' | 'non-blocking' | 'progressive' | 'multi-step';\n}\n\n/** Modal - PatternFly Modal wrapper with semantic metadata for AI tooling */\nexport const Modal = React.forwardRef<any, ModalProps>(({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  interactionType,\n  children,\n  variant,\n  isOpen,\n  ...props\n}, ref) => {\n  // Auto-infer semantic properties from PatternFly props\n  const inferredPurpose = purpose || (variant === 'small' ? 'confirmation' : \n                                     variant === 'large' ? 'form' : 'information');\n  \n  const inferredInteractionType = interactionType || (isOpen ? 'blocking' : 'non-blocking');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `modal-${inferredPurpose}-${inferredInteractionType}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} modal with ${inferredInteractionType} interaction`,\n    category: 'overlay',\n    complexity: 'complex',\n    usage: [`${inferredPurpose}-dialog`, 'user-interaction', 'workflow-step']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Modal';\n\n  return (\n    <PFModal\n      {...props}\n      ref={ref}\n      variant={variant}\n      isOpen={isOpen}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-interaction-type={inferredInteractionType}\n    >\n      {children}\n    </PFModal>\n  );\n});\n\nexport default Modal;\n","import React from 'react';\nimport { Th as PFTh } from '@patternfly/react-table';\nimport { SemanticComponentProps } from '../types';\n\nexport interface ThProps extends Omit<React.ComponentProps<typeof PFTh>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this table header (auto-inferred from props if not provided) */\n  purpose?: 'column-header' | 'sortable-header' | 'selectable-header' | 'action-header';\n  /** The data type this header represents (auto-inferred from content if not provided) */\n  dataType?: 'text' | 'number' | 'date' | 'boolean' | 'action' | 'mixed';\n}\n\n/** Th - PatternFly Table Header wrapper with semantic metadata for AI tooling */\nexport const Th: React.FC<ThProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  dataType,\n  children,\n  sort,\n  ...props\n}) => {\n  // Auto-infer semantic properties from PatternFly props\n  const inferredPurpose = purpose || (sort ? 'sortable-header' : \n                                     children?.toString().toLowerCase().includes('select') ? 'selectable-header' :\n                                     children?.toString().toLowerCase().includes('action') ? 'action-header' : 'column-header');\n  \n  // Simple data type inference based on content\n  const inferredDataType = dataType || (children?.toString().toLowerCase().includes('date') ? 'date' :\n                                       children?.toString().toLowerCase().includes('id') || \n                                       children?.toString().toLowerCase().includes('count') ? 'number' :\n                                       children?.toString().toLowerCase().includes('action') ? 'action' : 'text');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `table-header-${inferredPurpose}-${inferredDataType}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} for ${inferredDataType} data`,\n    category: 'data-display',\n    complexity: 'simple',\n    usage: [`table-${inferredPurpose}`, 'data-organization', 'column-definition']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Header';\n\n  return (\n    <PFTh\n      {...props}\n      sort={sort}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-data-type={inferredDataType}\n    >\n      {children}\n    </PFTh>\n  );\n};\n\nexport default Th;\n","import React from 'react';\nimport { Td as PFTd } from '@patternfly/react-table';\nimport { SemanticComponentProps } from '../types';\n\nexport interface TdProps extends Omit<React.ComponentProps<typeof PFTd>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this table cell (auto-inferred from props if not provided) */\n  purpose?: 'data-cell' | 'action-cell' | 'selectable-cell' | 'status-cell';\n  /** The data type this cell contains (auto-inferred from content if not provided) */\n  dataType?: 'text' | 'number' | 'date' | 'boolean' | 'action' | 'mixed';\n}\n\n/** Td - PatternFly Table Data wrapper with semantic metadata for AI tooling */\nexport const Td: React.FC<TdProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  dataType,\n  children,\n  ...props\n}) => {\n  // Auto-infer semantic properties from PatternFly props and content\n  const inferredPurpose = purpose || (React.Children.toArray(children).some(child => \n    React.isValidElement(child) && child.type?.toString().includes('Button')) ? 'action-cell' :\n    React.Children.toArray(children).some(child => \n      React.isValidElement(child) && child.type?.toString().includes('Checkbox')) ? 'selectable-cell' :\n    children?.toString().toLowerCase().includes('status') ? 'status-cell' : 'data-cell');\n  \n  // Simple data type inference based on content\n  const inferredDataType = dataType || (typeof children === 'number' ? 'number' :\n                                       children?.toString().match(/^\\d{4}-\\d{2}-\\d{2}/) ? 'date' :\n                                       children?.toString().toLowerCase() === 'true' || \n                                       children?.toString().toLowerCase() === 'false' ? 'boolean' :\n                                       React.Children.toArray(children).some(child => \n                                         React.isValidElement(child) && child.type?.toString().includes('Button')) ? 'action' : 'text');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `table-cell-${inferredPurpose}-${inferredDataType}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} containing ${inferredDataType} data`,\n    category: 'data-display',\n    complexity: 'simple',\n    usage: [`table-${inferredPurpose}`, 'data-presentation', 'row-content']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Row Item';\n\n  return (\n    <PFTd\n      {...props}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-data-type={inferredDataType}\n    >\n      {children}\n    </PFTd>\n  );\n};\n\nexport default Td;\n","import React from 'react';\nimport { Thead as PFThead } from '@patternfly/react-table';\nimport { SemanticComponentProps } from '../types';\n\nexport interface TheadProps extends Omit<React.ComponentProps<typeof PFThead>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this table header section (auto-inferred from props if not provided) */\n  purpose?: 'column-definition' | 'sortable-headers' | 'selectable-headers' | 'action-headers';\n}\n\n/** Thead - PatternFly Table Header wrapper with semantic metadata for AI tooling */\nexport const Thead: React.FC<TheadProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  children,\n  ...props\n}) => {\n  // Auto-infer semantic properties from children content\n  const inferredPurpose = purpose || (React.Children.toArray(children).some(child => \n    React.isValidElement(child) && child.props?.sort) ? 'sortable-headers' :\n    React.Children.toArray(children).some(child => \n      React.isValidElement(child) && child.props?.children?.toString().toLowerCase().includes('select')) ? 'selectable-headers' :\n    React.Children.toArray(children).some(child => \n      React.isValidElement(child) && child.props?.children?.toString().toLowerCase().includes('action')) ? 'action-headers' : 'column-definition');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `table-header-section-${inferredPurpose}`;\n  const metadata = aiMetadata || {\n    description: `Table header section with ${inferredPurpose}`,\n    category: 'data-display',\n    complexity: 'moderate',\n    usage: [`table-${inferredPurpose}`, 'data-organization', 'column-structure']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Header Section';\n\n  return (\n    <PFThead\n      {...props}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n    >\n      {children}\n    </PFThead>\n  );\n};\n\nexport default Thead;\n","import React from 'react';\nimport { Tbody as PFTbody } from '@patternfly/react-table';\nimport { SemanticComponentProps } from '../types';\n\nexport interface TbodyProps extends Omit<React.ComponentProps<typeof PFTbody>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this table body section (auto-inferred from props if not provided) */\n  purpose?: 'data-rows' | 'selectable-rows' | 'action-rows' | 'mixed-content';\n}\n\n/** Tbody - PatternFly Table Body wrapper with semantic metadata for AI tooling */\nexport const Tbody: React.FC<TbodyProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  children,\n  ...props\n}) => {\n  // Auto-infer semantic properties from children content\n  const inferredPurpose = purpose || (React.Children.toArray(children).some(child => \n    React.isValidElement(child) && React.Children.toArray(child.props?.children).some(cell => \n      React.isValidElement(cell) && cell.props?.children?.toString().toLowerCase().includes('select'))) ? 'selectable-rows' :\n    React.Children.toArray(children).some(child => \n      React.isValidElement(child) && React.Children.toArray(child.props?.children).some(cell => \n        React.isValidElement(cell) && cell.props?.children?.toString().toLowerCase().includes('action'))) ? 'action-rows' :\n    React.Children.toArray(children).some(child => \n      React.isValidElement(child) && React.Children.toArray(child.props?.children).some(cell => \n        React.isValidElement(cell) && typeof cell.props?.children === 'object')) ? 'mixed-content' : 'data-rows');\n  \n  // Generate semantic role and AI metadata\n  const role = semanticRole || `table-body-section-${inferredPurpose}`;\n  const metadata = aiMetadata || {\n    description: `Table body section with ${inferredPurpose}`,\n    category: 'data-display',\n    complexity: 'moderate',\n    usage: [`table-${inferredPurpose}`, 'data-presentation', 'row-content']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Body Section';\n\n  return (\n    <PFTbody\n      {...props}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n    >\n      {children}\n    </PFTbody>\n  );\n};\n\nexport default Tbody;\n","import React from 'react';\nimport { Checkbox as PFCheckbox } from '@patternfly/react-core';\nimport { SemanticComponentProps } from '../types';\n\nexport interface CheckboxProps extends Omit<React.ComponentProps<typeof PFCheckbox>, 'children'>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this checkbox (auto-inferred from props if not provided) */\n  purpose?: 'selection' | 'toggle' | 'form-input' | 'filter';\n  /** The context where this checkbox is used (auto-inferred from props if not provided) */\n  context?: 'table' | 'form' | 'filter' | 'settings';\n  /** Required id for PatternFly Checkbox */\n  id: string;\n}\n\n/** Checkbox - PatternFly Checkbox wrapper with semantic metadata for AI tooling */\nexport const Checkbox: React.FC<CheckboxProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  context,\n  children,\n  isChecked,\n  onChange,\n  id,\n  ...props\n}) => {\n  // Auto-infer semantic properties from PatternFly props\n  const inferredPurpose = purpose || (isChecked !== undefined ? 'selection' : 'form-input');\n  \n  const inferredContext = context || (onChange ? 'interactive' : 'form');\n\n  // Generate semantic role and AI metadata\n  const role = semanticRole || `checkbox-${inferredPurpose}-${inferredContext}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} checkbox for ${inferredContext} context`,\n    category: 'forms',\n    complexity: 'simple',\n    usage: [`${inferredContext}-${inferredPurpose}`, 'user-interaction']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Row Item';\n\n  return (\n    <PFCheckbox\n      {...props}\n      id={id}\n      isChecked={isChecked}\n      onChange={onChange}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-context={inferredContext}\n    >\n      {children}\n    </PFCheckbox>\n  );\n};\n\nexport default Checkbox;\n","import React from 'react';\nimport { SemanticComponentProps } from '../types';\n\nexport interface LinkProps extends React.AnchorHTMLAttributes<HTMLAnchorElement>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this link (auto-inferred from props if not provided) */\n  purpose?: 'navigation' | 'action' | 'download' | 'external' | 'launch';\n  /** The context where this link is used (auto-inferred from props if not provided) */\n  context?: 'table' | 'card' | 'navigation' | 'content';\n}\n\n/** Link - HTML anchor wrapper with semantic metadata for AI tooling */\nexport const Link: React.FC<LinkProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  context,\n  children,\n  href,\n  onClick,\n  ...props\n}) => {\n  // Auto-infer semantic properties from props\n  const inferredPurpose = purpose || (href?.startsWith('http') ? 'external' :\n                                     href === '#' ? 'action' :\n                                     href?.includes('download') ? 'download' :\n                                     children?.toString().toLowerCase().includes('launch') ? 'launch' : 'navigation');\n\n  const inferredContext = context || (onClick ? 'interactive' : 'content');\n\n  // Generate semantic role and AI metadata\n  const role = semanticRole || `link-${inferredPurpose}-${inferredContext}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} link for ${inferredContext} context`,\n    category: 'navigation',\n    complexity: 'simple',\n    usage: [`${inferredContext}-${inferredPurpose}`, 'user-interaction']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Row Item';\n\n  return (\n    <a\n      {...props}\n      href={href}\n      onClick={onClick}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-context={inferredContext}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import React from 'react';\nimport { SemanticComponentProps } from '../types';\n\nexport interface StatusBadgeProps extends React.HTMLAttributes<HTMLSpanElement>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** The semantic purpose of this status badge (auto-inferred from content if not provided) */\n  purpose?: 'status-indicator' | 'progress-indicator' | 'state-display' | 'alert-indicator';\n  /** The status type (auto-inferred from content if not provided) */\n  statusType?: 'success' | 'warning' | 'error' | 'info' | 'pending' | 'ready';\n}\n\n/** StatusBadge - HTML span wrapper with semantic metadata for AI tooling */\nexport const StatusBadge: React.FC<StatusBadgeProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  statusType,\n  children,\n  ...props\n}) => {\n  // Auto-infer semantic properties from content\n  const content = children?.toString().toLowerCase() || '';\n  \n  const inferredStatusType = statusType || (content.includes('ready') ? 'ready' :\n                                           content.includes('success') ? 'success' :\n                                           content.includes('warning') ? 'warning' :\n                                           content.includes('error') ? 'error' :\n                                           content.includes('pending') ? 'pending' : 'info');\n\n  const inferredPurpose = purpose || 'status-indicator';\n\n  // Generate semantic role and AI metadata\n  const role = semanticRole || `status-badge-${inferredPurpose}-${inferredStatusType}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} showing ${inferredStatusType} status`,\n    category: 'data-display',\n    complexity: 'simple',\n    usage: [`${inferredPurpose}`, 'status-display', 'state-indication']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Row Item';\n\n  return (\n    <span\n      {...props}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-status-type={inferredStatusType}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default StatusBadge;\n","import React from 'react';\nimport { SemanticComponentProps } from '../types';\n\nexport interface StarIconProps extends React.HTMLAttributes<HTMLSpanElement>, SemanticComponentProps {\n  children?: React.ReactNode;\n  /** Whether this star is favorited/active */\n  isFavorited?: boolean;\n  /** The semantic purpose of this star icon (auto-inferred from props if not provided) */\n  purpose?: 'favorite-toggle' | 'rating' | 'bookmark' | 'highlight';\n  /** The context where this star is used (auto-inferred from props if not provided) */\n  context?: 'table' | 'card' | 'list' | 'content';\n}\n\n/** StarIcon - HTML span wrapper with semantic metadata for AI tooling */\nexport const StarIcon: React.FC<StarIconProps> = ({\n  semanticName,\n  semanticRole,\n  aiMetadata,\n  purpose,\n  context,\n  children,\n  isFavorited,\n  onClick,\n  ...props\n}) => {\n  // Auto-infer semantic properties from props\n  const inferredPurpose = purpose || (isFavorited !== undefined ? 'favorite-toggle' : 'rating');\n  \n  const inferredContext = context || (onClick ? 'interactive' : 'display');\n\n  // Generate semantic role and AI metadata\n  const role = semanticRole || `star-icon-${inferredPurpose}-${inferredContext}`;\n  const metadata = aiMetadata || {\n    description: `${inferredPurpose} star icon for ${inferredContext} context`,\n    category: 'forms',\n    complexity: 'simple',\n    usage: [`${inferredContext}-${inferredPurpose}`, 'user-interaction']\n  };\n\n  // Default semantic name if not provided\n  const defaultSemanticName = semanticName || 'Row Item';\n\n  return (\n    <span\n      {...props}\n      onClick={onClick}\n      data-semantic-name={defaultSemanticName}\n      data-semantic-role={role}\n      data-ai-metadata={JSON.stringify(metadata)}\n      data-purpose={inferredPurpose}\n      data-context={inferredContext}\n      data-is-favorited={isFavorited}\n    >\n      {children}\n    </span>\n  );\n};\n\nexport default StarIcon;\n","import { ComponentMetadata } from '../types';\n\n/**\n * Utility functions for managing component metadata\n */\n\n/**\n * Generates default metadata for a component based on its type and props\n */\nexport const generateComponentMetadata = (\n  componentName: string,\n  props: Record<string, unknown> = {}\n): ComponentMetadata => {\n  const baseMetadata: ComponentMetadata = {\n    name: componentName,\n    description: `Semantic wrapper for ${componentName}`,\n    category: 'data-display',\n    complexity: 'simple',\n    accessibility: ['keyboard-navigable'],\n    usage: ['user-interface'],\n    props: props\n  };\n\n  // Customize based on component type\n  switch (componentName.toLowerCase()) {\n    case 'button':\n      return {\n        ...baseMetadata,\n        category: 'forms',\n        description: 'Interactive button with semantic meaning',\n        usage: ['user-interaction', 'form-submission', 'navigation']\n      };\n    case 'card':\n      return {\n        ...baseMetadata,\n        category: 'data-display',\n        description: 'Content container with semantic purpose',\n        usage: ['content-organization', 'data-presentation']\n      };\n    case 'modal':\n      return {\n        ...baseMetadata,\n        category: 'overlay',\n        complexity: 'complex',\n        description: 'Overlay dialog with semantic purpose',\n        accessibility: ['keyboard-navigable', 'focus-management', 'screen-reader-friendly'],\n        usage: ['user-interaction', 'workflow-step', 'confirmation']\n      };\n    default:\n      return baseMetadata;\n  }\n};\n\n/**\n * Validates component metadata\n */\nexport const validateMetadata = (metadata: ComponentMetadata): boolean => {\n  return !!(\n    metadata.name &&\n    metadata.description &&\n    metadata.category &&\n    metadata.complexity &&\n    Array.isArray(metadata.accessibility) &&\n    Array.isArray(metadata.usage)\n  );\n};\n\n/**\n * Merges user-provided metadata with defaults\n */\nexport const mergeMetadata = (\n  userMetadata: Partial<ComponentMetadata>,\n  defaultMetadata: ComponentMetadata\n): ComponentMetadata => {\n  return {\n    ...defaultMetadata,\n    ...userMetadata,\n    accessibility: [...defaultMetadata.accessibility, ...(userMetadata.accessibility || [])],\n    usage: [...defaultMetadata.usage, ...(userMetadata.usage || [])]\n  };\n};\n","/**\n * Accessibility utility functions\n */\n\n/**\n * Generates ARIA attributes based on component context\n */\nexport const generateAriaAttributes = (\n  componentType: string\n): Record<string, string> => {\n  const baseAttributes: Record<string, string> = {};\n\n  switch (componentType.toLowerCase()) {\n    case 'button':\n      return {\n        ...baseAttributes,\n        role: 'button',\n        tabIndex: '0'\n      };\n    case 'card':\n      return {\n        ...baseAttributes,\n        role: 'region',\n        tabIndex: '0'\n      };\n    case 'modal':\n      return {\n        ...baseAttributes,\n        role: 'dialog',\n        'aria-modal': 'true',\n        tabIndex: '-1'\n      };\n    default:\n      return baseAttributes;\n  }\n};\n\n/**\n * Validates accessibility requirements\n */\nexport const validateAccessibility = (\n  componentType: string,\n  props: Record<string, unknown>\n): string[] => {\n  const issues: string[] = [];\n\n  // Check for required ARIA attributes\n  if (componentType === 'button' && !props['aria-label'] && !props.children) {\n    issues.push('Button should have aria-label or visible text content');\n  }\n\n  if (componentType === 'modal' && !props['aria-labelledby'] && !props.title) {\n    issues.push('Modal should have aria-labelledby or title');\n  }\n\n  return issues;\n};\n\n/**\n * Generates keyboard shortcuts metadata\n */\nexport const generateKeyboardShortcuts = (\n  componentType: string,\n  context: Record<string, unknown> = {}\n): string[] => {\n  const shortcuts: string[] = [];\n\n  switch (componentType.toLowerCase()) {\n    case 'button':\n      shortcuts.push('Enter', 'Space');\n      if (context.action === 'close') {\n        shortcuts.push('Escape');\n      }\n      break;\n    case 'modal':\n      shortcuts.push('Escape', 'Tab', 'Shift+Tab');\n      break;\n    case 'card':\n      if (context.interactive) {\n        shortcuts.push('Enter', 'Space');\n      }\n      break;\n  }\n\n  return shortcuts;\n};\n","import React from 'react';\nimport { ComponentMetadata } from '../types';\nimport { generateComponentMetadata, mergeMetadata } from '../utils/metadata';\n\n/**\n * Hook for managing semantic metadata for components\n */\nexport const useSemanticMetadata = (\n  componentName: string,\n  userMetadata?: Partial<ComponentMetadata>,\n  props: Record<string, unknown> = {}\n) => {\n  const [metadata, setMetadata] = React.useState<ComponentMetadata>(() => {\n    const defaultMetadata = generateComponentMetadata(componentName, props);\n    return userMetadata ? mergeMetadata(userMetadata, defaultMetadata) : defaultMetadata;\n  });\n\n  React.useEffect(() => {\n    const defaultMetadata = generateComponentMetadata(componentName, props);\n    const mergedMetadata = userMetadata ? mergeMetadata(userMetadata, defaultMetadata) : defaultMetadata;\n    setMetadata(mergedMetadata);\n  }, [componentName, userMetadata, props]);\n\n  const updateMetadata = (updates: Partial<ComponentMetadata>) => {\n    setMetadata(prev => ({ ...prev, ...updates }));\n  };\n\n  return {\n    metadata,\n    updateMetadata\n  };\n};\n","import React from 'react';\nimport { generateAriaAttributes, validateAccessibility, generateKeyboardShortcuts } from '../utils/accessibility';\n\n/**\n * Hook for managing accessibility features\n */\nexport const useAccessibility = (\n  componentType: string,\n  props: Record<string, unknown> = {},\n  context: Record<string, unknown> = {}\n) => {\n  const ariaAttributes = React.useMemo(() => \n    generateAriaAttributes(componentType),\n    [componentType]\n  );\n\n  const keyboardShortcuts = React.useMemo(() => \n    generateKeyboardShortcuts(componentType, context),\n    [componentType, context]\n  );\n\n  const accessibilityIssues = React.useMemo(() => \n    validateAccessibility(componentType, props),\n    [componentType, props]\n  );\n\n  const enhancedProps = React.useMemo(() => ({\n    ...props,\n    ...ariaAttributes,\n    'data-keyboard-shortcuts': keyboardShortcuts.join(','),\n    'data-accessibility-issues': accessibilityIssues.join(',')\n  }), [props, ariaAttributes, keyboardShortcuts, accessibilityIssues]);\n\n  return {\n    ariaAttributes,\n    keyboardShortcuts,\n    accessibilityIssues,\n    enhancedProps\n  };\n};\n"],"names":["_jsx","PFButton","PFCard","PFModal","PFTh","PFTd","PFThead","PFTbody","PFCheckbox"],"mappings":"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"}